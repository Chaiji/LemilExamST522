{
    "contents" : "#' @export\n#' @return returns pi estimated by simulating Buffon's experiment.\n#' @title Buffon's needle\n#' @usage buffon.needle(n=10, l=1, d=1)\n#'\n#' @keywords buffon needle simulation pi estimation\n#'\n#' @description This function takes 3 arguments to simulate Buffon's experiment to estimate pi.\n#'\n#' @param n is a positive integer value that specifies how many needles that are tossed in the simulation.\n#' @param l is a positive number that specifies the length of the needles tossed in the simulation.\n#' @param d is a positive number that specifies the distance between the stripes on the floor in the simulation.\n#' @author Nguyen Khanh Le Ho & Emil H. Andersen \\cr\n#' Department of Mathematics and Computer Science (IMADA) \\cr\n#' University of Southern Denmark, Denmark \\cr\n#' \\email{emila14@student.sdu.dk} \\cr\n#' \\email{ngho14@student.sdu.dk} \\cr\n#' @examples\n#' buffon.needle(n=3408, l=2.5,d=3)\n\nbuffon.needle <- function(n = 10,l = 1,d = 1){\n  #------------------------------------Error Handler:--------------------------------------#\n  # ---------------------------------------------------------------------------------------#\n  # 'n' must be numeric, natural number greater than 1.                                    #\n  # 'l' and 'd' must be numeric, positive numbers.                                         #\n  #----------------------------------------------------------------------------------------#\n  if(is.matrix(n) || is.list(n) || length(n)!=1){ #Check that n is a single value\n    stop(\"'n' has to be a positive integer; length=1, non-list, non-matrix\")\n  } else if(!is.numeric(n)){ #checks if n is a number\n    stop(\"'n' has to be a positive integer\")\n  } else if(n < 1 || n != round(n)){ #checks if n is a natural number\n    stop(\"'n' has to be a positive integer\")\n  }\n  if(is.matrix(l) || is.list(l) || length(l)!=1){ #Check that l is a single value\n    stop(\"'l' has to be a positive integer; length=1, non-list, non-matrix\")\n  } else if(!is.numeric(l)){ #checks if l is a number\n    stop(\"'l' has to be a positive number\")\n  } else if(l != abs(l)){ #checks if l is a positive number\n    stop(\"'l' has to be a positive number\")\n  }\n  if(is.matrix(d) || is.list(d) || length(d)!=1){ #Check that d is a single value\n    stop(\"'d' has to be a positive integer; length=1, non-list, non-matrix\")\n  } else if(!is.numeric(d)){ #checks if l is a number\n    stop(\"'d' has to be a positive number\")\n  } else if(d != abs(d)){ #checks if l is a positive number\n    stop(\"'d' has to be a positive number\")\n  }\n  #---------------------------------------End Error Handler---------------------------------#\n  U <- matrix(runif(n*2),nrow=n,ncol=2) #We need 2 random variables for every needle. We throw n needles.\n  #Calling the runif function as few times as possible appears to minimize simulation time.\n  return((2*l*n)/(d*sum(U[,1]*d < l*sin(U[,2]*(pi/2))))) #Number of hits are calculated directly in the return.\n  #U[,1] contains n random numbers. U[,2] contains n random numbers.\n}\n",
    "created" : 1465122211209.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3937050676",
    "id" : "13D1AC2D",
    "lastKnownWriteTime" : 1465308826,
    "path" : "C:/Users/Emil/Dropbox/Universitet/ST522/FinalProjectCombined/GitHub/LemilExamST522/R/buffon.needle.R",
    "project_path" : "R/buffon.needle.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}