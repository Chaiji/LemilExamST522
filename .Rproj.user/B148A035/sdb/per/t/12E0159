{
    "contents" : "\n#' @title Calculation the Chi Squared probability.\n#' @export\n#' @return returns the probability that the \\code{Chi} is greater than \\code{x} (area under the distribution which is greater than \\code{x}).\n#' @usage chi.probability(x, df = 5, n = 1000)\n#' @keywords distribution chi Monte Carlo simulation Estimation\n#' @description \\code{chi.probability} computes the probability that the \\code{Chi} of a given degree of freedom is greater than a specified value \\code{x}.\n#' If \\code{x} is a vector, the function will return a vector of probabilities of the components of \\code{x}.\n#' @param x specifies the value that should be evaluated in the Chi Square distribution.\n#' @param df specifies degrees of freedom in the Chi Square distribution.\n#' @param n specifies number of random numbers for evaluating the distribution.\n#' @author Nguyen Khanh Le Ho & Emil H. Andersen \\cr\n#' Department of Mathematics and Computer Science (IMADA) \\cr\n#' University of Southern Denmark, Denmark \\cr\n#' \\email{emila14@student.sdu.dk} \\cr\n#' \\email{ngho14@student.sdu.dk} \\cr\n#' @examples\n#' chi.probability(x= 5, df = 5, n = 1000)\n\n\nchi.probability <- function(x, df = 5, n = 1000){\n\n  #------------------------------------Error Handler:--------------------------------------#\n  # ---------------------------------------------------------------------------------------#\n  # 'n' and 'df' must be numeric, natural number greater than 1.                           #\n  # 'x' must be a numerical vector.                                                        #\n  #----------------------------------------------------------------------------------------#\n  if(is.matrix(n) || is.list(n) || length(n)!=1){ #Check that n is a single value\n    stop(\"'n' has to be a positive integer; length=1, non-list, non-matrix\")\n  } else if(!is.numeric(n)){ #checks if n is a number\n    stop(\"'n' has to be a positive integer\")\n  } else if(n < 1 || n != round(n)){ #checks if n is a natural number\n    stop(\"'n' has to be a positive integer\")\n  }\n  if(is.matrix(df) || is.list(df) || length(df)!=1){ #Check that df is a single value\n    stop(\"'df' has to be an integer; length=1, non-list, non-matrix\")\n  } else if(!is.numeric(df)){ #checks if df is a number\n    stop(\"'df' has to be a positive integer\")\n  } else if(df < 1){ #checks if df is a positive integer\n    stop(\"'df' has to be a positive integer\")\n  }\n  if(is.matrix(x) || is.list(x) || !is.numeric(x)){ #Check that x is a vector of numbers(can be any length)\n    stop(\"'x' has to be an integer; non-list, non-matrix\")\n  }\n  #---------------------------------------End Error Handler---------------------------------#\n  lx <- length(x) #Save the length of x for later\n\n  storage <- matrix(rep(0,lx*n), nrow = lx) #Generate a matrix so rows are used for multiple different chi probabilities(if x is longer than 1. Defensive)\n  Pr <- rep(0,length(x)) #Create Pr to save results in.\n\n  for(k in 1:lx){ #For every different x, we create values for Pr.\n    for(i in 1:n){ #We want n numbers for each different x.\n      storage[k,i]<- sum(rnorm(df)^2) #Chi values\n    }\n  }\n\n  for(j in 1: lx){ #For every different x, we create a different P-value\n    Pr[j] <- length(storage[j,][storage[j,] > x[j]])/n #We get P(chi^2 > x)\n  }\n  return(Pr) #Returns the p-value\n}\n",
    "created" : 1465024410034.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4016984513",
    "id" : "12E0159",
    "lastKnownWriteTime" : 1465027741,
    "path" : "C:/Users/Emil/Dropbox/Universitet/ST522/FinalProjectCombined/Package/LemilExamST522/R/chi.probability.R",
    "project_path" : "R/chi.probability.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "type" : "r_source"
}