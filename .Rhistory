buffon.sim(3408,3,2.5)
buffon.sim(3408,3,2.5)
buffon.sim(3408,3,2.5)
buffon.sim(3408,3,2.5)
buffon.sim(3408,3,2.5)
buffon.sim(3408,3,2.5)
buffon.sim(3408,3,2.5)
buffon.needle2 <- function(n,l,d){
U <- matrix(runif(n*2),nrow=n,ncol=2)
return((2*l*n)/(d*sum(U[,1]*d < l*sin(U[,2]*(pi/2)))))
}
buffon.needle2(3408,3,2.5)
buffon.needle2(3408,3,2.5)
buffon.needle2(3408,3,2.5)
buffon.needle2(3408,3,2.5)
buffon.needle2(3408,3,2.5)
U <- matrix(runif(n*2),nrow=n,ncol=2)
U[,1]
buffon.needle2(3408,2.5,3)
buffon.needle2(3408,2.5,3)
buffon.needle2(3408,2.5,3)
buffon.needle2(3408,2.5,3)
buffon.needle2(3408,2.5,3)
buffon.needle2(3408,2.5,3)
buffon.needle2(3408,2.5,3)
for(i in 1:10000){buffon.needle2(3408,2.5,3)}
for(i in 1:10000){buffon.needle2(3408,2.5,3)}
for(i in 1:10000){buffon.sim(3408,3,2.5)}
sum(for(i in 1:10000){buffon.needle2(3408,2.5,3)})/10000
a <- c()
for(i in 1:10000){
a[i] <- buffon.needle2(3408,2.5,3)
}
sum(a)/10000
around <- round(a,digits=6)
around == round(pi,digits=6)
sum(around == round(pi,digits=6))
sum(p)
mc.discrete <- function(p,k,n){
#------------------------------------Error Handler:--------------------------------------------#
# ---------------------------------------------------------------------------------------------#
# x is a vector of numbers                                                                     #
# n is the number of points to be used for plotting the density function. default is 500       #
# method is a string that either contains "naive" or "kernel", defaults to "naive"             #
# from is a number for where to start plot. If none chosen, calculates based on sd(x)          #
# to is a number for where to end plot. If none chosen, calculates based on sd(x)              #
#----------------------------------------------------------------------------------------------#
#p is a matrix with ncol=nrow
if(is.list(p) || !is.numeric(p) || !is.matrix(p) || is.vector(p)){
stop("The given data 'p' must be a numerical matrix.")
} else if(dim(p)[1] != dim(p)[2]){
stop("The given data 'p' must have the same number of columns and rows.")
} else if(sum(p) != dim(p)[1]){
stop("The given data 'p' must have summed probability 1 in every row.")
}
if(is.matrix(k) || is.list(k) || length(k)!=1){ #Check that k is a single value
stop("'k' has to be a positive integer; length=1, non-list, non-matrix")
} else if(!is.numeric(k)){ #checks if n is a number
stop("'k' has to be a positive integer")
} else if(k < 1 || n != round(n) || k > dim(p)[2]){ #checks if k is a natural number inside the transition probability matrix
stop("'k' has to be a positive integer between 1 and the width/height of the transition probability matrix")
}
if(is.matrix(n) || is.list(n) || length(n)!=1){ #Check that n is a single value
stop("'n' has to be a positive integer; length=1, non-list, non-matrix")
} else if(!is.numeric(n)){ #checks if n is a number
stop("'n' has to be a positive integer")
} else if(n < 1 || n != round(n)){ #checks if n is a natural number
stop("'n' has to be a positive integer")
}
#---------------------------------------End Error Handler--------------------------------------#
width <- dim(p)[2]
road <- rep(0,n)
for(i in 1:n){
point <- FALSE
j <- 1
a <- runif(1)
while(point == FALSE){
if(a <= p[k,j]){
point = TRUE
road[i] = j
k = j
} else{
a <- a - p[k,j]
j <- j + 1
}
}
}
stationary <- rep(0,width)
for(i in 1:width){
stationary[i] = sum(road == i)/n
}
return(stationary)
}
p <- matrix(c(0,0,0,0.4,0.7,0.5,0.6,0.3,0.5),nrow=3,ncol=3)
mc.discrete(p,1,100)
p <- matrix(c(0.1,0,0,0.4,0.7,0.5,0.6,0.3,0.5),nrow=3,ncol=3)
mc.discrete(p,1,100)
p <- matrix(c(0.1,0,0,0.4,0.7,0.5),nrow=3,ncol=2)
mc.discrete(p,1,100)
p <- list()
mc.discrete(p,1,100)
p <- matrix(c("HI!",0,0,0.4,0.7,0.5,0.6,0.3,0.5),nrow=3,ncol=3)
mc.discrete(p,1,100)
p <- matrix(c(0,0,0,0.4,0.7,0.5,0.6,0.3,0.5),nrow=3,ncol=3)
mc.discrete(p,1,100)
p <- c(0,0,0,0.4,0.7,0.5,0.6,0.3,0.5)
mc.discrete(p,1,100)
mc.discrete <- function(p,k,n){
#------------------------------------Error Handler:--------------------------------------------#
# ---------------------------------------------------------------------------------------------#
# p is a transition probability matrix                                                         #
# k is an integer indicating the initial state of the chain                                    #
# n is a natural number indicating the number of simulated steps                               #
#----------------------------------------------------------------------------------------------#
#p is a matrix with ncol=nrow
if(is.list(p) || !is.numeric(p) || !is.matrix(p) || is.vector(p)){
stop("The given data 'p' must be a numerical matrix.")
} else if(dim(p)[1] != dim(p)[2]){
stop("The given data 'p' must have the same number of columns and rows.")
} else if(sum(p) != dim(p)[1]){
stop("The given data 'p' must have summed probability 1 in every row.")
}
if(is.matrix(k) || is.list(k) || length(k)!=1){ #Check that k is a single value
stop("'k' has to be a positive integer; length=1, non-list, non-matrix")
} else if(!is.numeric(k)){ #checks if n is a number
stop("'k' has to be a positive integer")
} else if(k < 1 || n != round(n) || k > dim(p)[2]){ #checks if k is a natural number inside the transition probability matrix
stop("'k' has to be a positive integer between 1 and the width/height of the transition probability matrix")
}
if(is.matrix(n) || is.list(n) || length(n)!=1){ #Check that n is a single value
stop("'n' has to be a positive integer; length=1, non-list, non-matrix")
} else if(!is.numeric(n)){ #checks if n is a number
stop("'n' has to be a positive integer")
} else if(n < 1 || n != round(n)){ #checks if n is a natural number
stop("'n' has to be a positive integer")
}
#---------------------------------------End Error Handler--------------------------------------#
width <- dim(p)[2] #Lets us know what the highest number to expect.
road <- rep(0,n) #Saves space for the amount of steps we take.
va <- runif(n)
for(i in 1:n){ #We need to take n steps.
point <- FALSE #Used to check if we found a point
j <- 1 #We start from 1, when checking probabilities.
while(point == FALSE){
if(va[i] <= p[k,j]){
point = TRUE
road[i] = j
k = j
} else{
va[i] <- va[i] - p[k,j]
j <- j + 1
}
}
}
stationary <- rep(0,width)
for(i in 1:width){
stationary[i] = sum(road == i)/n
}
return(stationary)
}
p <- matrix(c(0.2,0.3,0,0,0,0.4,0.7,0,0.5,0,0,0,0,0.7,0,0,0,0,0,0,0.5,0.9,0.25,0,0,0,0,0.1,0.5,0.4,0.1,0,0,0,0.25,0.2),nrow=6,ncol=6)
k <- 3
n <- 10000
mc.discrete(p,k,n)
library(LemilExamST522)
library(roxygen2)
roxygen2::roxygenise()
library(LemilExamST522)
roxygen2::roxygenise()
Beta.sim <- function(n = 1337, a = 2.5, b = 5.5, initVal = 0.5){
B <- c(initVal) # start value.
rate = 0        # rejection counter
for(i in 2:n){
Y <- runif(1)
test <- min(dbeta(Y,a,b)/dbeta(B[i-1],a,b),1)  # Acceptance probability
B[i] <- if(P <- runif(1) < test){Y }else{ B[i-1] }
rate = rate + (P > test)
}
print(rate/n)
return(B)
}
Beta.sim()
plot(Fi <- Beta.sim( n= 200 ), type = "l")
par(mfrow=c(1,1))
plot(Fi <- Beta.sim( n= 200 ), type = "l")
print(paste("I like trains",2))
Beta.sim <- function(n = 1337, a = 2.5, b = 5.5, initVal = 0.5){
B <- c(initVal) # start value.
rate = 0        # rejection counter
for(i in 2:n){
Y <- runif(1)
test <- min(dbeta(Y,a,b)/dbeta(B[i-1],a,b),1)  # Acceptance probability
B[i] <- if(P <- runif(1) < test){Y }else{ B[i-1] }
rate = rate + (P > test)
}
print(paste("The rejection rate is",rate/n)
return(B)
}
Beta.sim <- function(n = 1337, a = 2.5, b = 5.5, initVal = 0.5){
B <- c(initVal) # start value.
rate = 0        # rejection counter
for(i in 2:n){
Y <- runif(1)
test <- min(dbeta(Y,a,b)/dbeta(B[i-1],a,b),1)  # Acceptance probability
B[i] <- if(P <- runif(1) < test){Y }else{ B[i-1] }
rate = rate + (P > test)
}
print(paste("The rejection rate is",rate/n))
return(B)
}
plot(Fi <- Beta.sim( n= 200 ), type = "l")
Beta.sim <- function(n = 1337, a = 2.5, b = 5.5, initVal = 0.5){
B <- c(initVal) # start value.
rate = 0        # rejection counter
Y <- runif(n-1) #we need n - 1 random variables
for(i in 2:n){
test <- min(dbeta(Y[i-1],a,b)/dbeta(B[i-1],a,b),1)  # Acceptance probability
B[i] <- if(P <- runif(1) < test){Y[i-1] }else{ B[i-1] }
rate = rate + (P > test)
}
print(paste("The rejection rate is",rate/n))
return(B)
}
plot(Fi <- Beta.sim( n= 200 ), type = "l")
plot(Fi <- Beta.sim( n= 200 ), type = "l")
plot(Fi <- Beta.sim( n= 200 ), type = "l")
plot(Fi <- Beta.sim( n= 200 ), type = "l")
plot(Fi <- Beta.sim( n= 2000 ), type = "l")
plot(Fi <- Beta.sim( n= 2000 ), type = "l")
Beta.sim <- function(n = 1337, a = 2.5, b = 5.5, initVal = 0.5){
B <- c(initVal) # start value.
rate = 0        # rejection counter
va <- matrix(runif((n-1)*2),nrow=n, ncol=2)
Y <- runif(n-1) #We need n - 1 random variables
P <- runif(n-1) #We need another n-1
for(i in 2:n){
test <- min(dbeta(va[i-1,1],a,b)/dbeta(B[i-1],a,b),1)  # Acceptance probability
B[i] <- if(va[i-1,2] < test){va[i-1,1] }else{ B[i-1] }
rate = rate + (va[i-1,2] > test)
}
print(paste("The rejection rate is",rate/n))
return(B)
}
plot(Fi <- Beta.sim( n= 2000 ), type = "l")
Beta.sim <- function(n = 1337, a = 2.5, b = 5.5, initVal = 0.5){
B <- c(initVal) # start value.
rate = 0        # rejection counter
va <- matrix(runif((n-1)*2),nrow=n-1, ncol=2)
Y <- runif(n-1) #We need n - 1 random variables
P <- runif(n-1) #We need another n-1
for(i in 2:n){
test <- min(dbeta(va[i-1,1],a,b)/dbeta(B[i-1],a,b),1)  # Acceptance probability
B[i] <- if(va[i-1,2] < test){va[i-1,1] }else{ B[i-1] }
rate = rate + (va[i-1,2] > test)
}
print(paste("The rejection rate is",rate/n))
return(B)
}
plot(Fi <- Beta.sim( n= 2000 ), type = "l")
plot(Fi <- Beta.sim( n= 2000 ), type = "l")
plot(Fi <- Beta.sim( n= 2000 ), type = "l")
plot(Fi <- Beta.sim( n= 2000 ), type = "l")
plot(Fi <- Beta.sim( n= 2000 ), type = "l")
plot(Fi <- Beta.sim( n= 2000 ), type = "l")
plot(Fi <- Beta.sim( n= 2000 ), type = "l")
Beta.sim <- function(n = 1337, a = 2.5, b = 5.5, initVal = 0.5){
B <- c(initVal) # start value.
rate = 0        # rejection counter
va <- matrix(runif((n-1)*2),nrow=n-2, ncol=2)
Y <- runif(n-1) #We need n - 1 random variables
P <- runif(n-1) #We need another n-1
for(i in 2:n){
test <- min(dbeta(va[i-1,1],a,b)/dbeta(B[i-1],a,b),1)  # Acceptance probability
B[i] <- if(va[i-1,2] < test){va[i-1,1] }else{ B[i-1] }
rate = rate + (va[i-1,2] > test)
}
print(paste("The rejection rate is",rate/n))
return(B)
}
plot(Fi <- Beta.sim( n= 2000 ), type = "l")
Beta.sim <- function(n = 1337, a = 2.5, b = 5.5, initVal = 0.5){
B <- c(initVal) # start value.
rate = 0        # rejection counter
Y <- runif(n-1) #We need n - 1 random variables
P <- runif(n-1) #We need another n-1
for(i in 2:n){
test <- min(dbeta(Y[i-1],a,b)/dbeta(B[i-1],a,b),1)  # Acceptance probability
B[i] <- if(P[i-1] <- runif(1) < test){Y[i-1] }else{ B[i-1] }
rate = rate + (P[i-1] > test)
}
print(paste("The rejection rate is",rate/n))
return(B)
}
plot(Fi <- Beta.sim( n= 2000 ), type = "l")
plot(Fi <- Beta.sim( n= 2000 ), type = "l")
plot(Fi <- Beta.sim( n= 2000 ), type = "l")
plot(Fi <- Beta.sim( n= 2000 ), type = "l")
plot(Fi <- Beta.sim( n= 2000 ), type = "l")
plot(Fi <- Beta.sim( n= 2000 ), type = "l")
plot(Fi <- Beta.sim( n= 2000 ), type = "l")
va <- matrix(runif((n-1)*2),nrow=n-1,ncol=2)
n <- 200
va <- matrix(runif((n-1)*2),nrow=n-1,ncol=2)
va
Beta.sim <- function(n = 1337, a = 2.5, b = 5.5, initVal = 0.5){
B <- c(initVal) # start value.
rate = 0        # rejection counter
va <- matrix(runif((n-1)*2),nrow=n-1,ncol=2)
Y <- runif(n-1) #We need n - 1 random variables
P <- runif(n-1) #We need another n-1
for(i in 2:n){
test <- min(dbeta(va[i-1,1],a,b)/dbeta(B[i-1],a,b),1)  # Acceptance probability
B[i] <- if(va[i-1,2] < test){va[i-1,1] }else{ B[i-1] }
rate = rate + (va[i-1,2] > test)
}
print(paste("The rejection rate is",rate/n))
return(B)
}
plot(Fi <- Beta.sim( n= 2000 ), type = "l")
Beta.sim <- function(n = 1337, a = 2.5, b = 5.5, initVal = 0.5){
B <- c(initVal) # start value.
rate = 0        # rejection counter
Y <- runif(n-1) #We need n - 1 random variables
P <- runif(n-1) #We need another n-1
for(i in 2:n){
test <- min(dbeta(Y[i-1],a,b)/dbeta(B[i-1],a,b),1)  # Acceptance probability
B[i] <- if(P < test){Y[i-1] }else{ B[i-1] }
rate = rate + (P > test)
}
print(paste("The rejection rate is",rate/n))
return(B)
}
Beta.sim <- function(n = 1337, a = 2.5, b = 5.5, initVal = 0.5){
B <- c(initVal) # start value.
rate = 0        # rejection counter
Y <- runif(n-1) #We need n - 1 random variables
P <- runif(n-1) #We need another n-1
for(i in 2:n){
test <- min(dbeta(Y[i-1],a,b)/dbeta(B[i-1],a,b),1)  # Acceptance probability
B[i] <- if(P[i-1] < test){Y[i-1] }else{ B[i-1] }
rate = rate + (P[i-1] > test)
}
print(paste("The rejection rate is",rate/n))
return(B)
}
plot(Fi <- Beta.sim( n= 2000 ), type = "l")
p <- runif(1) < 0.5
p
P[i-1] < test
2 < test
2 < 0.5
Beta.sim <- function(n = 1337, a = 2.5, b = 5.5, initVal = 0.5){
B <- c(initVal) # start value.
rate = 0        # rejection counter
Y <- runif(n-1) #We need n - 1 random variables
P <- runif(n-1) #We need another n-1
for(i in 2:n){
test <- min(dbeta(Y[i-1],a,b)/dbeta(B[i-1],a,b),1)  # Acceptance probability
B[i] <- if(P[i-1] < test){Y[i-1] }else{ B[i-1] }
rate = rate + ((P[i-1] < test) > test)
}
print(paste("The rejection rate is",rate/n))
return(B)
}
plot(Fi <- Beta.sim( n= 2000 ), type = "l")
plot(Fi <- Beta.sim( n= 2000 ), type = "l")
plot(Fi <- Beta.sim( n= 2000 ), type = "l")
plot(Fi <- Beta.sim( n= 2000 ), type = "l")
plot(Fi <- Beta.sim( n= 2000 ), type = "l")
plot(Fi <- Beta.sim( n= 2000 ), type = "l")
plot(Fi <- Beta.sim( n= 2000 ), type = "l")
plot(Fi <- Beta.sim( n= 200 ), type = "l")
plot(Fi <- Beta.sim( n= 200 ), type = "l")
plot(Fi <- Beta.sim( n= 200 ), type = "l")
plot(Fi <- Beta.sim( n= 200 ), type = "l")
plot(Fi <- Beta.sim( n= 200 ), type = "l")
Beta.sim <- function(n = 1337, a = 2.5, b = 5.5, initVal = 0.5){
B <- c(initVal) # start value.
rate = 0        # rejection counter
va <- matrix(runif((n-1)*2),nrow=n-1,ncol=2)
#Y <- runif(n-1) #We need n - 1 random variables
#P <- runif(n-1) #We need another n-1
for(i in 2:n){
test <- min(dbeta(va[i-1,1],a,b)/dbeta(B[i-1],a,b),1)  # Acceptance probability
B[i] <- if(va[i-1,2] < test){va[i-1,1] }else{ B[i-1] }
rate = rate + ((va[i-1,2] < test) > test)
}
print(paste("The rejection rate is",rate/n))
return(B)
}
plot(Fi <- Beta.sim( n= 200 ), type = "l")
plot(Fi <- Beta.sim( n= 200 ), type = "l")
plot(Fi <- Beta.sim( n= 200 ), type = "l")
plot(Fi <- Beta.sim( n= 200 ), type = "l")
plot(Fi <- Beta.sim( n= 200 ), type = "l")
plot(Fi <- Beta.sim( n= 200 ), type = "l")
plot(Fi <- Beta.sim( n= 200 ), type = "l")
plot(Fi <- Beta.sim( n= 200 ), type = "l")
plot(Fi <- Beta.sim( n= 200 ), type = "l")
plot(Fi <- Beta.sim( n= 20000 ), type = "l")
Beta.sim <- function(n = 1337, a = 2.5, b = 5.5, initVal = 0.5){
B <- c(initVal) # start value.
rate = 0        # rejection counter
va <- matrix(runif((n-1)*2),nrow=n-1,ncol=2)
Y <- va[,1]
P <- va[,2]
for(i in 2:n){
test <- min(dbeta(Y[i-1],a,b)/dbeta(B[i-1],a,b),1)  # Acceptance probability
B[i] <- if(P[i-1] <- P[i-1] < test){Y[i-1] }else{ B[i-1] }
rate = rate + (P[i-1] > test)
}
print(paste("The rejection rate is",rate/n))
return(B)
}
plot(Fi <- Beta.sim( n= 20000 ), type = "l")
plot(Fi <- Beta.sim( n= 200 ), type = "l")
plot(Fi <- Beta.sim( n= 200 ), type = "l")
plot(Fi <- Beta.sim( n= 200 ), type = "l")
plot(Fi <- Beta.sim( n= 200 ), type = "l")
plot(Fi <- Beta.sim( n= 200 ), type = "l")
plot(Fi <- Beta.sim( n= 200 ), type = "l")
Beta.sim <- function(n = 1337, a = 2.5, b = 5.5, initVal = 0.5){
B <- c(initVal) # start value.
rate = 0        # rejection counter
va <- matrix(runif((n-1)*2),nrow=n-1,ncol=2) #We need (n-1)*2 random variables
Y <- va[,1] #To make it easier to read, we split them to Y and P
P <- va[,2]
for(i in 2:n){
test <- min(dbeta(Y[i-1],a,b)/dbeta(B[i-1],a,b),1)  # Acceptance probability
B[i] <- if(P[i-1] <- P[i-1] < test){Y[i-1] }else{ B[i-1] }
#rate = rate + (P[i-1] > test)
}
rate <- sum(P)
print(paste("The rejection rate is",rate/n))
return(B)
}
plot(Fi <- Beta.sim( n= 200 ), type = "l")
plot(Fi <- Beta.sim( n= 200 ), type = "l")
P <- runif(1) < 0.5
P
Beta.sim <- function(n = 1337, a = 2.5, b = 5.5, initVal = 0.5){
B <- c(initVal) # start value.
rate = 0        # rejection counter
va <- matrix(runif((n-1)*2),nrow=n-1,ncol=2) #We need (n-1)*2 random variables
Y <- va[,1] #To make it easier to read, we split them to Y and P
P <- va[,2]
for(i in 2:n){
test <- min(dbeta(Y[i-1],a,b)/dbeta(B[i-1],a,b),1)  # Acceptance probability
B[i] <- if(P[i-1] < test){Y[i-1] }else{ B[i-1] }
rate = rate + (P[i-1] > test)
}
#rate <- sum(P)
print(paste("The rejection rate is",rate/n))
return(B)
}
plot(Fi <- Beta.sim( n= 200 ), type = "l")
plot(Fi <- Beta.sim( n= 200 ), type = "l")
plot(Fi <- Beta.sim( n= 200 ), type = "l")
plot(Fi <- Beta.sim( n= 200 ), type = "l")
plot(Fi <- Beta.sim( n= 200 ), type = "l")
plot(Fi <- Beta.sim( n= 200 ), type = "l")
Beta.sim <- function(n = 1337, a = 2.5, b = 5.5, initVal = 0.5){
B <- c(initVal) # start value.
rate = 0        # rejection counter
va <- matrix(runif((n-1)*2),nrow=n-1,ncol=2) #We need (n-1)*2 random variables
Y <- va[,1] #To make it easier to read, we split them to Y and P
P <- va[,2]
for(i in 2:n){
test <- min(dbeta(Y[i-1],a,b)/dbeta(B[i-1],a,b),1)  # Acceptance probability
B[i] <- if(P[i-1] < test){Y[i-1] }else{ B[i-1] }
#rate = rate + (P[i-1] > test)
}
rate <- sum(P)
print(paste("The rejection rate is",rate/n))
return(B)
}
plot(Fi <- Beta.sim( n= 200 ), type = "l")
plot(Fi <- Beta.sim( n= 200 ), type = "l")
plot(Fi <- Beta.sim( n= 200 ), type = "l")
plot(Fi <- Beta.sim( n= 200 ), type = "l")
plot(Fi <- Beta.sim( n= 200 ), type = "l")
Beta.sim <- function(n = 1337, a = 2.5, b = 5.5, initVal = 0.5){
B <- c(initVal) # start value.
rate = 0        # rejection counter
va <- matrix(runif((n-1)*2),nrow=n-1,ncol=2) #We need (n-1)*2 random variables
Y <- va[,1] #To make it easier to read, we split them to Y and P
P <- va[,2]
for(i in 2:n){
test <- min(dbeta(Y[i-1],a,b)/dbeta(B[i-1],a,b),1)  # Acceptance probability
B[i] <- if(P[i-1] < test){Y[i-1] }else{ B[i-1] }
rate = rate + (P[i-1] > test)
}
print(paste("The rejection rate is",rate/n))
return(B)
}
plot(Fi <- Beta.sim( n= 200 ), type = "l")
plot(Fi <- Beta.sim( n= 200 ), type = "l")
hist(faithful$eruptions)
library(LemilExamST522)
library(roxygen2)
roxygen2::roxygenise()
library(LemilExamST522)
library(LemilExamST522)
library(LemilExamST522)
LemilExamST522
LemilExamST522::Beta.sim()
roxygen2::roxygenise()
library(LemilExamST522)
library(LemilExamST522)
library(LemilExamST522)
library(roxygen2)
roxygen2::roxygenise()
